{

	// Place your snippets for JavaScript React here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Enzyme shallow rendering test": {
		"prefix": "shallow",
		"body": [
			"import React from 'react';",
			"import { expect } from 'chai';",
			"import { shallow } from 'enzyme';",
			"import sinon from 'sinon';",
			"",
			"import $1 from './$1';",
			"import $2 from './$2';",
			"",
			"describe('<$1 />', () => {",
			"  it('renders three $0 <$2 /> components', () => {",
			"    const wrapper = shallow(<$1 />);",
			"    expect(wrapper.find($2)).to.have.length(3);",
			"  });",
			"",
			"  it('renders an `.icon-star`', () => {",
			"    const wrapper = shallow(<$1 />);",
			"    expect(wrapper.find('.icon-star')).to.have.length(1);",
			"  });",
			"",
			"  it('renders children when passed in', () => {",
			"    const wrapper = shallow((",
			"      <$1>",
			"        <div className=\"unique\" />",
			"      </$1>",
			"    ));",
			"    expect(wrapper.contains(<div className=\"unique\" />)).to.equal(true);",
			"  });",
			"",
			"  it('simulates click events', () => {",
			"    const onButtonClickSpy = sinon.spy();",
			"    const wrapper = shallow(<$2 onButtonClick={onButtonClickSpy} />);",
			"    wrapper.find('button').simulate('click');",
			"    expect(onButtonClickSpy).to.have.property('callCount', 1);",
			"    onButtonClickSpy.restore",
			"  });",
			"});"
		],
		"description": "Enzyme shallow rendering test"
	}

}
